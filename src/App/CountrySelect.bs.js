// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Api from "./Api/Api.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.bs.js";
import * as DropDown from "./DropDown.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Css from "@emotion/css";
import ReactSelect from "react-select";
import * as CountrySelectMenu from "./CountrySelectMenu.bs.js";
import * as CountrySelectOption from "./CountrySelectOption.bs.js";
import * as Search_iconSvg from "./assets/search_icon.svg";

import 'flag-icons/css/flag-icons.min.css'
;

import './styles/CountrySelect.scss'
;

var make = Search_iconSvg.ReactComponent;

var SearchIcon = {
  make: make
};

var control = Css.css({
      minWidth: "230",
      margin: "8"
    });

var menu = {
  boxShadow: "inset 0 1px 0 rgba(0, 0, 0, 0.1)"
};

var searchIcon = Css.css({
      color: "grey",
      height: 13,
      width: 13
    });

var dropdownIndicator = Css.css({
      order: "-1"
    });

var Styles = {
  control: control,
  menu: menu,
  searchIcon: searchIcon,
  dropdownIndicator: dropdownIndicator
};

function CountrySelect$SearchIconComponent(Props) {
  return React.createElement("div", {
              className: dropdownIndicator
            }, React.createElement(make, {
                  className: searchIcon
                }));
}

var SearchIconComponent = {
  make: CountrySelect$SearchIconComponent
};

function components_DropdownIndicator(param) {
  return null;
}

function components_IndicatorSeparator(param) {
  return null;
}

function components_MenuList(props) {
  return React.createElement(CountrySelectMenu.make, {
              height: 164,
              itemSize: 26,
              menuProps: props
            });
}

function components_Option(param) {
  return React.createElement(CountrySelectOption.make, {
              option: param.data
            });
}

var components = {
  DropdownIndicator: components_DropdownIndicator,
  IndicatorSeparator: components_IndicatorSeparator,
  MenuList: components_MenuList,
  Option: components_Option
};

function CountrySelect(Props) {
  var country = Props.country;
  var className = Props.className;
  var onChange = Props.onChange;
  var match = React.useState(function () {
        return [];
      });
  var setOptions = match[1];
  var options = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setMenuIsOpen = match$1[1];
  var menuIsOpen = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setError = match$2[1];
  var onToggleHandler = function (_event) {
    return Curry._1(setMenuIsOpen, (function (param) {
                  return !menuIsOpen;
                }));
  };
  var onChangeHandler = function (country) {
    Curry._1(onChange, country.value);
    return Curry._1(setMenuIsOpen, (function (param) {
                  return false;
                }));
  };
  var currentCountry = options.find(function (option) {
        return option.value === country;
      });
  React.useEffect((function () {
          $$Promise.$$catch(Api.Country.getCountries(undefined).then(function (result) {
                    var tmp;
                    if (result.TAG === /* Ok */0) {
                      var countries = result._0;
                      tmp = Curry._1(setOptions, (function (_prev) {
                              return countries;
                            }));
                    } else {
                      var msg = result._0;
                      tmp = Curry._1(setError, (function (_prev) {
                              return "Could not query countries: " + msg;
                            }));
                    }
                    return Promise.resolve(tmp);
                  }), (function (e) {
                  if (e.RE_EXN_ID === Api.FailedRequest) {
                    var msg = e._1;
                    Curry._1(setError, (function (_prev) {
                            return "Operation failed! " + msg;
                          }));
                  } else {
                    Curry._1(setError, (function (_prev) {
                            return "Unknown error";
                          }));
                  }
                  return Promise.resolve(undefined);
                }));
          
        }), []);
  var selectWrapper = React.createElement(DropDown.make, {
        children: React.createElement(ReactSelect, {
              value: currentCountry === undefined ? undefined : Caml_option.some(currentCountry),
              defaultValue: "ru",
              options: options,
              onChange: onChangeHandler,
              autoFocus: true,
              controlShouldRenderValue: false,
              menuIsOpen: menuIsOpen,
              placeholder: "Search",
              components: components,
              classNamePrefix: "--country-select"
            }),
        isOpen: menuIsOpen,
        target: React.createElement(Button.make, {
              text: currentCountry !== undefined ? currentCountry.label : "",
              onClick: onToggleHandler
            }),
        onClose: onToggleHandler
      });
  return React.createElement("div", {
              className: className
            }, options.length > 0 ? selectWrapper : null);
}

var make$1 = CountrySelect;

export {
  SearchIcon ,
  Styles ,
  SearchIconComponent ,
  components ,
  make$1 as make,
  
}
/*  Not a pure module */
