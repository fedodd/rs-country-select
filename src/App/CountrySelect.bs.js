// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Api from "./Api/Api.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.bs.js";
import * as DropDown from "./DropDown.bs.js";
import * as SearchIcon from "./SearchIcon.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Css from "@emotion/css";
import ReactSelect from "react-select";
import * as CountrySelectMenu from "./CountrySelectMenu.bs.js";
import * as CountrySelectOption from "./CountrySelectOption.bs.js";

import 'flag-icons/css/flag-icons.min.css'
;

import './styles/CountrySelect.scss'
;

var errorStyle = Css.css({
      color: "red"
    });

function getComponentsWithListRef(listRef) {
  return {
          DropdownIndicator: (function (param) {
              return React.createElement(SearchIcon.make, {});
            }),
          IndicatorSeparator: (function (param) {
              return null;
            }),
          MenuList: (function (props) {
              return React.createElement(CountrySelectMenu.make, {
                          height: 160,
                          itemSize: 26,
                          menuProps: props,
                          listRef: listRef
                        });
            }),
          Option: (function (param) {
              return React.createElement(CountrySelectOption.make, {
                          option: param.data,
                          innerProps: param.innerProps,
                          isFocused: param.isFocused,
                          isSelected: param.isSelected
                        });
            })
        };
}

function CountrySelect(Props) {
  var country = Props.country;
  var className = Props.className;
  var onChange = Props.onChange;
  var listRef = React.useRef(null);
  var components = getComponentsWithListRef(listRef);
  var match = React.useState(function () {
        return [];
      });
  var setOptions = match[1];
  var options = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setMenuIsOpen = match$1[1];
  var menuIsOpen = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setError = match$2[1];
  var match$3 = React.useState(function () {
        return false;
      });
  var setIsError = match$3[1];
  var onToggleHandler = function (_event) {
    return Curry._1(setMenuIsOpen, (function (param) {
                  return !menuIsOpen;
                }));
  };
  var onChangeHandler = function (country) {
    Curry._1(onChange, country.value);
    return Curry._1(setMenuIsOpen, (function (param) {
                  return false;
                }));
  };
  var currentCountry = options.find(function (option) {
        return option.value === country;
      });
  React.useEffect((function () {
          $$Promise.$$catch(Api.Country.getCountries(undefined).then(function (result) {
                    var tmp;
                    if (result.TAG === /* Ok */0) {
                      var countries = result._0;
                      tmp = Curry._1(setOptions, (function (_prev) {
                              return countries;
                            }));
                    } else {
                      var msg = result._0;
                      Curry._1(setIsError, (function (_prev) {
                              return true;
                            }));
                      tmp = Curry._1(setError, (function (_prev) {
                              return "Could not query countries: " + msg;
                            }));
                    }
                    return Promise.resolve(tmp);
                  }), (function (e) {
                  if (e.RE_EXN_ID === Api.FailedRequest) {
                    var msg = e._1;
                    Curry._1(setError, (function (_prev) {
                            return "Operation failed! " + msg;
                          }));
                  } else {
                    Curry._1(setError, (function (_prev) {
                            return "Unknown error";
                          }));
                  }
                  return Promise.resolve(undefined);
                }));
          
        }), []);
  var onKeyDown = function ($$event) {
    var key = $$event.key;
    if (key === "Escape") {
      Curry._1(onChange, "");
      Curry._1(setMenuIsOpen, (function (param) {
              return false;
            }));
    }
    if (!(key === "ArrowUp" || key === "ArrowDown")) {
      return ;
    }
    var listEl = listRef.current;
    if (listEl == null) {
      return ;
    }
    var itemData = listEl.props.itemData;
    if (itemData == null) {
      return ;
    }
    var currentIndex = options.findIndex(function (option) {
          return option.value === itemData.value;
        });
    var indexToScroll = key === "ArrowUp" ? (
        currentIndex === 0 ? options.length : currentIndex - 1 | 0
      ) : (
        currentIndex === (options.length - 1 | 0) ? 0 : currentIndex + 1 | 0
      );
    return listEl.scrollToItem(indexToScroll, "auto");
  };
  return React.createElement("div", {
              className: className
            }, React.createElement(DropDown.make, {
                  children: match$3[0] ? React.createElement("span", {
                          className: errorStyle
                        }, match$2[0]) : React.createElement(ReactSelect, {
                          value: currentCountry === undefined ? undefined : Caml_option.some(currentCountry),
                          options: options,
                          onChange: onChangeHandler,
                          autoFocus: true,
                          onKeyDown: onKeyDown,
                          controlShouldRenderValue: false,
                          menuIsOpen: menuIsOpen,
                          placeholder: "Search",
                          components: components,
                          classNamePrefix: "--country-select",
                          escapeClearsValue: true,
                          tabSelectsValue: true
                        }),
                  isOpen: menuIsOpen,
                  target: React.createElement(Button.make, {
                        text: currentCountry !== undefined ? currentCountry.label : "",
                        onClick: onToggleHandler
                      }),
                  onClose: onToggleHandler
                }));
}

var make = CountrySelect;

export {
  errorStyle ,
  getComponentsWithListRef ,
  make ,
  
}
/*  Not a pure module */
